# -*- coding: utf-8 -*-
"""FUTURE_ML_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i2TgdGuaZWdH-L9uZnB0bDnLswIOtYxz
"""

# Install Prophet (do this only once)
!pip install prophet --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_squared_error
from google.colab import files

# Read CSV and preview
# Add the 'encoding' parameter to handle potential character encoding issues
try:
    df = pd.read_csv('/content/sales_data_sample.csv', encoding='utf-8')
except UnicodeDecodeError:
    # If utf-8 fails, try a different encoding like latin-1
    print("UTF-8 decoding failed, trying latin-1 encoding.")
    df = pd.read_csv('/content/sales_data_sample.csv', encoding='latin-1')

print("\nðŸ“„ First 5 rows of the dataset:")
print(df.head())
print("\nðŸ“Š Column names:", df.columns.tolist())

# Convert Date column and keep only Date and Sales
df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'], errors='coerce')
# Replace 'SALES_VALUE' with the actual column name for sales in your CSV
# For example, if the sales column is named 'SALES', change the line below to:
# df = df[['ORDERDATE', 'SALES']].dropna()
df = df[['ORDERDATE', 'SALES']].dropna() # <--- Change 'SALES_VALUE' to the actual sales column name
df = df.sort_values('ORDERDATE')
df = df.drop_duplicates()

# Rename for Prophet
# Replace the sales column name below with the actual column name you used above
# For example, if the sales column is named 'SALES', change the line below to:
# df = df.rename(columns={'ORDERDATE': 'ds', 'SALES': 'y'})
df = df.rename(columns={'ORDERDATE': 'ds', 'SALES': 'y'}) # <--- Change 'SALES_VALUE' to the actual sales column name

# Preview cleaned data
print("\nâœ… Cleaned data sample:")
print(df.head())

# Plot historical sales
plt.figure(figsize=(12,5))
plt.plot(df['ds'], df['y'], color='blue')
plt.title("ðŸ“ˆ Historical Sales Trend")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.grid(True)
plt.tight_layout()
plt.show()

# Create and train the Prophet model
model = Prophet()
model.fit(df)

# Forecast the next 90 periods (days, weeks, or months depending on original frequency)
future = model.make_future_dataframe(periods=90)
forecast = model.predict(future)

# Plot the sales forecast
fig1 = model.plot(forecast)
plt.title("ðŸ”® Sales Forecast for Next 90 Periods")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.grid(True)
plt.show()

# Show components: trend, weekly seasonality, yearly seasonality (if present)
fig2 = model.plot_components(forecast)
plt.show()

# Merge actual and predicted values for overlapping dates
merged_df = pd.merge(df, forecast[['ds', 'yhat']], on='ds', how='inner')

# Calculate error metrics
mae = mean_absolute_error(merged_df['y'], merged_df['yhat'])
rmse = np.sqrt(mean_squared_error(merged_df['y'], merged_df['yhat']))

print("\nðŸ“Œ Forecast Accuracy Metrics:")
print(f"â€¢ Mean Absolute Error (MAE): {mae:.2f}")
print(f"â€¢ Root Mean Squared Error (RMSE): {rmse:.2f}")

# Export the forecast to CSV
forecast.to_csv("sales_forecast_output.csv", index=False)
files.download("sales_forecast_output.csv")